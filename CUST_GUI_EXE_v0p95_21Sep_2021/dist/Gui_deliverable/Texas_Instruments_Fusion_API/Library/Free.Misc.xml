<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Free.Misc</name>
    </assembly>
    <members>
        <member name="T:Free.ExpressionEvaluation.AdditionalFunctionEventArgs">
            <summary>
            Event Handling for Additional Functions
            </summary>
        </member>
        <member name="M:Free.ExpressionEvaluation.AdditionalFunctionEventArgs.#ctor(System.String,System.Object[])">
            <summary>
            This is the only constructor
            </summary>
            <param name="name">the Name of the function</param>
            <param name="a_params"></param>
        </member>
        <member name="M:Free.ExpressionEvaluation.AdditionalFunctionEventArgs.GetParameters">
            <summary>
            This method will return an array of objects that are parameters.
            </summary>
            <returns>object array of function parameters</returns>
        </member>
        <member name="P:Free.ExpressionEvaluation.AdditionalFunctionEventArgs.Name">
            <summary>
            This is the name of the additional function
            </summary>
        </member>
        <member name="T:Free.ExpressionEvaluation.ExpressionEval">
            <summary>
            This class will evaluate boolean and mathmatical expressions. 
            Used by the Debugger API to evaluate C pre-processor macros 
            found in “pp” files, such as Uint16  rail_state_flags[1 &lt;&lt; 3].
            </summary>
        </member>
        <member name="T:Free.ExpressionEvaluation.IExpression">
            <summary>
            This interface is the base for all of the expression evaluation objects.
            </summary>
        </member>
        <member name="M:Free.ExpressionEvaluation.ExpressionEval.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Free.ExpressionEvaluation.ExpressionEval.#ctor(System.String)">
            <summary>
            Constructor with string
            </summary>
            <param name="expression">string of the Expression to evaluate</param>
        </member>
        <member name="M:Free.ExpressionEvaluation.ExpressionEval.Evaluate">
            <summary>
            Evaluates the expression
            </summary>
            <returns>object of the expression return value</returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.ExpressionEval.EvaluateBool">
            <summary>
            Evaluates the expression
            </summary>
            <returns>bool value of the evaluated expression</returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.ExpressionEval.EvaluateInt">
            <summary>
            Evaluates the expression
            </summary>
            <returns>integer value of the evaluated expression</returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.ExpressionEval.EvaluateDouble">
            <summary>
            Evaluates the expression
            </summary>
            <returns>double value of the evaluated expression</returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.ExpressionEval.EvaluateLong">
            <summary>
            Evaluates the expression
            </summary>
            <returns>long value of the evaluated expression</returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.ExpressionEval.Evaluate(System.String)">
            <summary>
            Static version of the Expression Evaluator
            </summary>
            <param name="expression">expression to be evaluated</param>
            <returns></returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.ExpressionEval.Evaluate(System.String,Free.ExpressionEvaluation.AdditionalFunctionEventHandler)">
            <summary>
            Static version of the Expression Evaluator
            </summary>
            <param name="expression">expression to be evaluated</param>
            <param name="handler">attach a custom function handler</param>
            <returns></returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.ExpressionEval.SetVariable(System.String,System.Object)">
            <summary>
            Sets a variable's value
            </summary>
            <param name="key">variable name</param>
            <param name="value">variable value</param>
        </member>
        <member name="M:Free.ExpressionEvaluation.ExpressionEval.ClearVariable(System.String)">
            <summary>
            Clear's a variable's value
            </summary>
            <param name="key">variable name</param>
        </member>
        <member name="M:Free.ExpressionEvaluation.ExpressionEval.ToString">
            <summary>
            gets a string representation of this expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.ExpressionEval.ExecuteEvaluation">
            <summary>
            Sorts the mathmatical operations to be executed
            </summary>
        </member>
        <member name="M:Free.ExpressionEvaluation.ExpressionEval.NextToken(System.Int32)">
            <summary>
            This will search the expression for the next token (operand, operator, etc)
            </summary>
            <param name="nIdx">Start Position of Search</param>
            <returns>First character index after token.</returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.ExpressionEval.EvaluateList">
            <summary>
            Traverses the list to perform operations on items according to operator precedence
            </summary>
            <returns>final evaluated expression of Expression string</returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.ExpressionEval.OperatorPrecedence(System.String)">
            <summary>
            This method gets the precedence of a binary operator
            </summary>
            <param name="strOp"></param>
            <returns></returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.ExpressionEval.PerformBinaryOp(Free.ExpressionEvaluation.ExpressionEval.BinaryOp,System.Object,System.Object)">
            <summary>
            This routine will actually execute an operation and return its value
            </summary>
            <param name="op">Operator Information</param>
            <param name="v1">left operand</param>
            <param name="v2">right operand</param>
            <returns>v1 (op) v2</returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.ExpressionEval.DoSpecialOperator(Free.ExpressionEvaluation.ExpressionEval.BinaryOp,System.Object,System.Object)">
            <summary>
            This will perform comparison operations based upon data type of value
            </summary>
            <param name="op">binary operator</param>
            <param name="v1">left operand</param>
            <param name="v2">right operand</param>
            <returns>return result of operator</returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.ExpressionEval.PerformUnaryOp(Free.ExpressionEvaluation.ExpressionEval.UnaryOp,System.Object)">
            <summary>
            This routine will actually execute an operation and return its value
            </summary>
            <param name="op">Operator Information</param>
            <param name="v">right operand</param>
            <returns>(op)v</returns>
        </member>
        <member name="P:Free.ExpressionEvaluation.ExpressionEval.Expression">
            <summary>
            Gets or sets the expression to be evaluated.
            </summary>
        </member>
        <member name="E:Free.ExpressionEvaluation.ExpressionEval.AdditionalFunctionEventHandler">
            <summary>
            This event will trigger for every function that is not intercepted internally
            </summary>
        </member>
        <member name="T:Free.ExpressionEvaluation.ExpressionEval.BinaryOp">
            <summary>
            This structure is used internally to order operations
            </summary>
        </member>
        <member name="T:Free.ExpressionEvaluation.ExpressionEval.BinaryOpQueue">
            <summary>
            Queueing binary operations
            </summary>
        </member>
        <member name="T:Free.ExpressionEvaluation.ExpressionEval.UnaryOp">
            <summary>
            This structure is used internally to order operations
            </summary>
        </member>
        <member name="T:Free.ExpressionEvaluation.ExpressionEval.Variable">
            <summary>
            used to specify variables
            </summary>
        </member>
        <member name="T:Free.ExpressionEvaluation.FunctionEval">
            <summary>
            This class provides functionality for evaluating functions
            </summary>
        </member>
        <member name="M:Free.ExpressionEvaluation.FunctionEval.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Free.ExpressionEvaluation.FunctionEval.#ctor(System.String)">
            <summary>
            Initializes the Expression Property
            </summary>
            <param name="expression">Expression to evaluate</param>
        </member>
        <member name="M:Free.ExpressionEvaluation.FunctionEval.Evaluate">
            <summary>
            Evaluates the Expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.FunctionEval.Evaluate(System.String)">
            <summary>
            Evaluates a string expression of a function
            </summary>
            <param name="expression"></param>
            <returns>evauluated value</returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.FunctionEval.Evaluate(System.String,Free.ExpressionEvaluation.AdditionalFunctionEventHandler)">
            <summary>
            Evaluates a string expression of a function
            </summary>
            <param name="expression"></param>
            <param name="handler">attach a custom function handler</param>
            <returns>evauluated value</returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.FunctionEval.Replace(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.FunctionEval.Replace(System.String,Free.ExpressionEvaluation.AdditionalFunctionEventHandler)">
            <summary>
            This routine will replace functions existing in a input string with thier respective values
            </summary>
            <param name="input">input string</param>
            <param name="handler">Additional function handler for custom functions</param>
            <returns>input string with all found functions replaced with returned values</returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.FunctionEval.ReplaceEx(System.String)">
            <summary>
            Since the static replace will not allow a second Replace(string), Replace(ex) will do so with
            this instance (so that variables will work)
            </summary>
            <param name="input">input string</param>
            <returns>filtered string</returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.FunctionEval.Replace">
            <summary>
            This routine will replace functions existing in the Expression property with thier respective values
            </summary>
            <returns>Expression string with all found functions replaced with returned values</returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.FunctionEval.SetVariable(System.String,System.Object)">
            <summary>
            Sets a variable's value
            </summary>
            <param name="key">variable name</param>
            <param name="value">variable value</param>
        </member>
        <member name="M:Free.ExpressionEvaluation.FunctionEval.ClearVariable(System.String)">
            <summary>
            Clear's a variable's value
            </summary>
            <param name="key">variable name</param>
        </member>
        <member name="M:Free.ExpressionEvaluation.FunctionEval.ToString">
            <summary>
            string override, return Expression property
            </summary>
            <returns>returns Expression property</returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.FunctionEval.GetParameters(System.Text.RegularExpressions.Match)">
            <summary>
            returns the parameters of a function
            </summary>
            <param name="m">regex math value</param>
            <returns></returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.FunctionEval.ExecuteFunction(System.String,System.Object[])">
            <summary>
            Executes the function based upon the name of the function
            </summary>
            <param name="name">name of the function to execute</param>
            <param name="p">parameter list</param>
            <returns>returned value of executed function</returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.FunctionEval.AdditionalFunctionHelper(System.String,System.Object[])">
            <summary>
            This method helps fire the event for any function not intercepted internally
            </summary>
            <param name="name">name of the function</param>
            <param name="parameters">parameters</param>
            <returns>returned from event</returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.FunctionEval.Iif(System.Object[])">
            <summary>
            Does the work for the IIF function
            </summary>
            <param name="parameters">
            parameters first is condition, 
            second is val if true, 
            third is val if false
            </param>
            <returns>params 2 if param 1 is true, otherwise param 3</returns>
        </member>
        <member name="M:Free.ExpressionEvaluation.FunctionEval.Case(System.Object[])">
            <summary>
            Executes a case/when statement
            </summary>
            <param name="parameters">condition, val, condition2, val2, ...</param>
            <returns>returns the parameter after the first condition parameter that evaluates to true</returns>
        </member>
        <member name="P:Free.ExpressionEvaluation.FunctionEval.Expression">
            <summary>
            Gets or sets the expression to be evaluated
            </summary>
            <value></value>
        </member>
        <member name="E:Free.ExpressionEvaluation.FunctionEval.AdditionalFunctionEventHandler">
            <summary>
            This event will trigger for every function that is not intercepted internally
            </summary>
        </member>
        <member name="M:Free.ExpressionEvaluation.TestProgram.eval_AdditionalFunctionEventHandler(System.Object,Free.ExpressionEvaluation.AdditionalFunctionEventArgs)">
            <summary>
            This event handler handles custom functions
            </summary>
            <param name="sender">the IExpression sending the object</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:Free.ExpressionEvaluation.DefinedRegex">
            <summary>
            This class is internal to the library, houses different regular expression objects
            </summary>
        </member>
        <member name="M:Free.PointD.Slope(Free.PointD,Free.PointD)">
            <summary>
            Find the slope from p1 to p2.
            </summary>
            <remarks>
            mmuegel@ti.com
            </remarks>
        </member>
        <member name="M:Free.PointD.Find_Y_On_Slope(Free.PointD,Free.PointD,System.Double)">
            <summary>
            Given two points that form a straight line, find a value Y that is also on
            that line given it's X value.
            </summary>
            <remarks>
            mmuegel@ti.com
            </remarks>
        </member>
        <member name="M:Free.PointD.Find_X_On_Slope(Free.PointD,Free.PointD,System.Double)">
            <summary>
            Given two points that form a straight line, find a value X that is also on
            that line given it's Y value.
            </summary>
            <remarks>
            mmuegel@ti.com
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Free.RemotingConfigurationHelper" -->
        <member name="M:Free.RemotingConfigurationHelper.UnregisterActivatedType(Free.RemotingConfigurationHelper.Mode,System.Type)">
            <summary>
            Unregisters the specified type/uri from the list of currently registered
            client-activated types.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Free.RemotingConfigurationHelper.LookupTypeInfo" -->
        <member name="T:Free.CsvReader">
            <summary>
            A data-reader style interface for reading Csv (and otherwise-char-separated) files.
            </summary>
        </member>
        <member name="M:Free.CsvReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Csv reader for the given stream.
            </summary>
            <param name="s">The stream to read the CSV from.</param>
        </member>
        <member name="M:Free.CsvReader.#ctor(System.IO.Stream,System.Char)">
            <summary>
            Creates a new reader for the given stream and separator.
            </summary>
            <param name="s">The stream to read the separator from.</param>
            <param name="separator">The field separator character</param>
        </member>
        <member name="M:Free.CsvReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates a new Csv reader for the given stream and encoding.
            </summary>
            <param name="s">The stream to read the CSV from.</param>
            <param name="enc">The encoding used.</param>
        </member>
        <member name="M:Free.CsvReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Char)">
            <summary>
            Creates a new reader for the given stream, encoding and separator character.
            </summary>
            <param name="s">The stream to read the data from.</param>
            <param name="enc">The encoding used.</param>
            <param name="separator">The separator character between the fields</param>
        </member>
        <member name="M:Free.CsvReader.#ctor(System.String)">
            <summary>
            Creates a new Csv reader for the given text file path.
            </summary>
            <param name="filename">The name of the file to be read.</param>
        </member>
        <member name="M:Free.CsvReader.#ctor(System.String,System.Char)">
            <summary>
            Creates a new reader for the given text file path and separator character.
            </summary>
            <param name="filename">The name of the file to be read.</param>
            <param name="separator">The field separator character</param>
        </member>
        <member name="M:Free.CsvReader.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Creates a new Csv reader for the given text file path and encoding.
            </summary>
            <param name="filename">The name of the file to be read.</param>
            <param name="enc">The encoding used.</param>
        </member>
        <member name="M:Free.CsvReader.#ctor(System.String,System.Text.Encoding,System.Char)">
            <summary>
            Creates a new reader for the given text file path, encoding and field separator.
            </summary>
            <param name="filename">The name of the file to be read.</param>
            <param name="enc">The encoding used.</param>
            <param name="separator">The field separator character.</param>
        </member>
        <member name="M:Free.CsvReader.GetCsvLine">
            <summary>
            Returns the fields for the next row of data (or null if at eof)
            </summary>
            <returns>A string array of fields or null if at the end of file.</returns>
        </member>
        <member name="M:Free.CsvReader.Dispose">
            <summary>
            Disposes the reader. The underlying stream is closed.
            </summary>
        </member>
        <member name="P:Free.CsvReader.Separator">
            <summary>
            The separator character for the fields. Comma for normal CSV.
            </summary>
        </member>
        <member name="T:Free.CsvReaderException">
            <summary>
            Exception class for CsvReader exceptions.
            </summary>
        </member>
        <member name="M:Free.CsvReaderException.#ctor">
            <summary>
            Constructs a new CsvReaderException.
            </summary>
        </member>
        <member name="M:Free.CsvReaderException.#ctor(System.String)">
            <summary>
            Constructs a new exception with the given message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Free.CsvReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new exception with the given message and the inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">Inner exception that caused this issue.</param>
        </member>
        <member name="M:Free.CsvReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new exception with the given serialization information.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Free.CsvWriter">
            <summary>
            A tool class for writing Csv and other char-separated field files.
            </summary>
        </member>
        <member name="M:Free.CsvWriter.#ctor(System.String)">
            <summary>
            Creates a new Csv writer for the given filename (overwriting existing contents).
            </summary>
            <param name="filename">The name of the file being written to.</param>
        </member>
        <member name="M:Free.CsvWriter.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new Csv writer for the given filename.
            </summary>
            <param name="filename">The name of the file being written to.</param>
            <param name="append">True if the contents shall be appended to the
            end of the possibly existing file.</param>
        </member>
        <member name="M:Free.CsvWriter.#ctor(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Creates a new Csv writer for the given filename and encoding.
            </summary>
            <param name="filename">The name of the file being written to.</param>
            <param name="enc">The encoding used.</param>
            <param name="append">True if the contents shall be appended to the
            end of the possibly existing file.</param>
        </member>
        <member name="M:Free.CsvWriter.#ctor(System.String,System.Char,System.Boolean)">
            <summary>
            Creates a new writer for the given filename and separator.
            </summary>
            <param name="filename">The name of the file being written to.</param>
            <param name="separator">The field separator character used.</param>
            <param name="append">True if the contents shall be appended to the
            end of the possibly existing file.</param>
        </member>
        <member name="M:Free.CsvWriter.#ctor(System.String,System.Text.Encoding,System.Char,System.Boolean)">
            <summary>
            Creates a new writer for the given filename, separator and encoding.
            </summary>
            <param name="filename">The name of the file being written to.</param>
            <param name="enc">The encoding used.</param>
            <param name="separator">The field separator character used.</param>
            <param name="append">True if the contents shall be appended to the
            end of the possibly existing file.</param>
        </member>
        <member name="M:Free.CsvWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Csv writer for the given stream.
            </summary>
            <param name="s">The stream to write the CSV to.</param>
        </member>
        <member name="M:Free.CsvWriter.#ctor(System.IO.Stream,System.Char)">
            <summary>
            Creates a new writer for the given stream and separator character.
            </summary>
            <param name="s">The stream to write the CSV to.</param>
            <param name="separator">The field separator character used.</param>
        </member>
        <member name="M:Free.CsvWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Char)">
            <summary>
            Creates a new writer for the given stream, separator and encoding.
            </summary>
            <param name="s">The stream to write the CSV to.</param>
            <param name="enc">The encoding used.</param>
            <param name="separator">The field separator character used.</param>
        </member>
        <member name="P:Free.CsvWriter.Separator">
            <summary>
            The separator character for the fields. Comma for normal CSV.
            </summary>
        </member>
        <member name="T:Free.XmlComments">
            <summary>Used to retrieve the XML comments for MemberInfo objects.</summary>
        </member>
        <member name="F:Free.XmlComments._assemblyDocs">
            <summary>Hashtable of all loaded XmlDocument comment files for assemblies.</summary>
        </member>
        <member name="F:Free.XmlComments._typeAccessors">
            <summary>
            Hashtable, indexed by Type, of all the accessors for a type.  Each entry is a Hashtable, 
            indexed by MethodInfo, that returns the MemberInfo for a given MethodInfo accessor.
            </summary>
        </member>
        <member name="F:Free.XmlComments._bindingFlags">
            <summary>Binding flags to use for reflection operations.</summary>
        </member>
        <member name="F:Free.XmlComments._comments">
            <summary>The entire XML comment block for this member.</summary>
        </member>
        <member name="F:Free.XmlComments._summary">
            <summary>The summary comment for this member.</summary>
        </member>
        <member name="F:Free.XmlComments._remarks">
            <summary>The remarks comment for this member.</summary>
        </member>
        <member name="F:Free.XmlComments._return">
            <summary>The return comment for this member.</summary>
        </member>
        <member name="F:Free.XmlComments._value">
            <summary>The value comment for this member.</summary>
        </member>
        <member name="F:Free.XmlComments._example">
            <summary>The example comment for this member.</summary>
        </member>
        <member name="F:Free.XmlComments._includes">
            <summary>The includes comments for this member.</summary>
        </member>
        <member name="F:Free.XmlComments._exceptions">
            <summary>The exceptions comments for this member.</summary>
        </member>
        <member name="F:Free.XmlComments._paramrefs">
            <summary>The paramrefs comments for this member.</summary>
        </member>
        <member name="F:Free.XmlComments._permissions">
            <summary>The permissions comments for this member.</summary>
        </member>
        <member name="F:Free.XmlComments._params">
            <summary>The params comments for this member.</summary>
        </member>
        <member name="M:Free.XmlComments.ToString">
            <summary>Renders to a string the entire XML comment block for this member.</summary>
        </member>
        <member name="M:Free.XmlComments.#ctor(System.Reflection.MemberInfo)">
            <summary>Initializes the XML comments for the specified member.</summary>
            <param name="mi">The member for which we want to retrieve the XML comments.</param>
        </member>
        <member name="M:Free.XmlComments.GetComments(System.Reflection.MemberInfo)">
            <summary>Retrieve the XML comments for a type or a member of a type.</summary>
            <param name="mi">The type or member for which comments should be retrieved.</param>
            <returns>A string of xml containing the xml comments of the selected type or member.</returns>
        </member>
        <member name="M:Free.XmlComments.IsAccessor(System.Reflection.MethodInfo)">
            <summary>Determines if a MethodInfo represents an accessor.</summary>
            <param name="mi">The MethodInfo to check.</param>
            <returns>The MemberInfo that represents the property or event if this is an accessor; null, otherwise.</returns>
        </member>
        <member name="M:Free.XmlComments.RetrieveAccessors(System.Type)">
            <summary>Retrieve all property and event accessors on a given type.</summary>
            <param name="t">The type from which the accessors should be retrieved.</param>
            <returns>A dictionary of all accessors.</returns>
        </member>
        <member name="M:Free.XmlComments.CreateParamsDescription(System.Reflection.ParameterInfo[])">
            <summary>Generates a parameter string used when searching xml comment files.</summary>
            <param name="parameters">List of parameters to a member.</param>
            <returns>A parameter string used when searching xml comment files.</returns>
        </member>
        <member name="M:Free.XmlComments.LoadAssemblyComments(System.Reflection.Assembly)">
            <summary>Get the xml documentation for an assembly.</summary>
            <param name="a">The assembly whose documentation is to be loaded.</param>
            <returns>The xml documentation for an assembly; null if none found.</returns>
        </member>
        <member name="M:Free.XmlComments.DetermineXmlPath(System.Reflection.Assembly)">
            <summary>Gets the path to a valid xml comments file for the assembly.</summary>
            <param name="asm">The assembly whose documentation is to be found.</param>
            <returns>The path to documentation for an assembly; null if none found.</returns>
        </member>
        <member name="P:Free.XmlComments.AllComments">
            <summary>Gets the entire XML comment block for this member.</summary>
        </member>
        <member name="P:Free.XmlComments.Summary">
            <summary>Gets the summary comment for this member.</summary>
        </member>
        <member name="P:Free.XmlComments.Remarks">
            <summary>Gets the remarks comment for this member.</summary>
        </member>
        <member name="P:Free.XmlComments.Return">
            <summary>Gets the return comment for this member.</summary>
        </member>
        <member name="P:Free.XmlComments.Value">
            <summary>Gets the value comment for this member.</summary>
        </member>
        <member name="P:Free.XmlComments.Example">
            <summary>Gets the example comment for this member.</summary>
        </member>
        <member name="P:Free.XmlComments.Includes">
            <summary>Gets the includes comments for this member.</summary>
        </member>
        <member name="P:Free.XmlComments.Exceptions">
            <summary>Gets the exceptions comments for this member.</summary>
        </member>
        <member name="P:Free.XmlComments.ParamRefs">
            <summary>Gets the paramrefs comments for this member.</summary>
        </member>
        <member name="P:Free.XmlComments.Permissions">
            <summary>Gets the permissions comments for this member.</summary>
        </member>
        <member name="P:Free.XmlComments.Params">
            <summary>Gets the params comments for this member.</summary>
        </member>
        <member name="P:Free.XmlComments.Current">
            <summary>Gets the XML comments for the calling method.</summary>
        </member>
        <member name="T:Free.XmlCommentsTestHarness">
            <summary>Summary description for XmlCommentsTestHarness.</summary>
        </member>
        <member name="M:Free.XmlCommentsTestHarness.Main(System.String[])">
            <summary>The main entry point for the application.</summary>
        </member>
        <member name="M:Free.XmlCommentsTestHarness.Finalize">
            <summary>This is the finalizer.</summary>
        </member>
        <member name="M:Free.XmlCommentsTestHarness.Run">
            <summary>Do Stuff.</summary>
        </member>
        <member name="M:Free.XmlCommentsTestHarness.DummyEventHandler(System.Object,System.EventArgs)">
            <summary>A method that can handle MyEvent.</summary>
        </member>
        <member name="P:Free.XmlCommentsTestHarness.SomeProperty">
            <summary>This should show up as the current comments for the get accessor.</summary>
        </member>
        <member name="E:Free.XmlCommentsTestHarness.MyEvent">
            <summary>This should show up as the current comments for the add accessor.</summary>
            <remarks>Actually, both comments should show up for both accessors.</remarks>
        </member>
    </members>
</doc>
